import psycopg2
from time import gmtime, strftime

# Set the database name
DB_NAME = "news"

# Questions can be added here:
# - .question = friendly question to show on output
# - .sql = sql statement
# - .value = the value of the quantity returned by the sql statement
tasks = [
    {
        "question": "(Q) What are the most popular three articles of all " +
        "time?",
        "sql": """
            SELECT title, count(title) FROM articles
                JOIN log ON concat('/article/', articles.slug) = log.path
                GROUP BY title
                ORDER BY count DESC LIMIT 3;
        """,
        "value": "views"
    },
    {
        "question": "(Q) Who are the most popular article authors of all " +
        "time?",
        "sql": """
            SELECT authors.name, count(*) AS view_count FROM articles
                JOIN authors ON articles.author = authors.id
                JOIN log ON concat('/article/', articles.slug) = log.path
                    WHERE log.status LIKE '%200%'
                GROUP BY authors.name
                ORDER BY view_count DESC;
        """,
        "value": "views"
    },
    {
        "question": "(Q) On which days did more than 1% of requests " +
        "lead to errors?",
        "sql": """
            SELECT day, percent FROM (
                SELECT day, round(
                    (sum(requests) /
                    (SELECT count(*) FROM log WHERE
                        substring(cast(log.time AS text), 0, 11) = day)
                    * 100), 2)
                    AS percent FROM (
                        SELECT substring(
                            cast(log.time AS text), 0, 11)
                        AS day,
                        count(*) AS requests FROM log
                            WHERE status LIKE '%404%' GROUP BY day)
                AS log_percentage GROUP BY day ORDER BY percent DESC)
                AS result
                    WHERE percent >= 1
        """,
        "value": "errors"
    }
]


class NewsLogging:
    """Logging the news database to answer some questions as provided in tasks

    This class houses all of the neccessary components in answering the
    questions that have been asked in the tasks array previously.
    """
    def __init__(self):
        """Check for a good DB connection, then start answering questions"""
        try:
            # Set the current timestamp on GMT time and use it in the output
            time = strftime("%Y-%m-%d %H:%M", gmtime())

            self.db = psycopg2.connect(database=DB_NAME)
            self.c = self.db.cursor()

            # Overwrite any previous version of the news.log file
            self.log = open("news.log", "w")
            self.log.write("NEWS DB LOGGING (last updated: " + time + ")")

            # Write a successful note to the console
            self.debugLog('Connection established')

        except Exception as exception:

            # Something broke, notfy the console and print the exception
            self.debugLog('An error occurred')
            print(exception)

    def answer(self):
        """Gather the information for each question in the array

        Send the information that is gathered from the array into the
        appropriate function
        """
        for item in tasks:

            # Run the sql query and store the response as a variable
            response = self.query(item["sql"])
            self.logAnswers(item["question"], response, item["value"])

    def query(self, sql):
        """Hit the database and get the results from the passed in SQL

        Arguments:
            sql {String} -- SQL query to run

        Returns:
            Object -- Results from the query
        """
        self.c.execute(sql)
        return self.c.fetchall()

    def logAnswers(self, question, answer, value):
        """Write the responses from the question (and the question) to the log

        Taking the response generated by the query, this function will
        assign the information to a new line within the news.log file

        Arguments:
            question {String} -- The question we are answering
            answer {Array} -- Array of responses from the SQL query
            value {String} -- The unit for the quantitative figure
        """

        # Add some spacing and write the question to the log
        # Be sure to remove all newlines from within the question text
        self.log.write('\n\n' + question.strip('\n') + '\n')

        # For each dataset within the answer, create a new "bullet point"
        # response in the log file
        for i in range(len(answer)):
            qty = str(answer[i][1]) + ' ' + value
            self.log.write('- ' + answer[i][0] + ' -- ' + qty + '\n')

        # Show in the console that a question has been answered
        self.debugLog('Question has been answered')

    def close(self):
        """Close the DB connection and file

        Just a little bit of cleanup so we don't waste resources
        """
        self.db.close()
        self.log.close()

        # One final note to the console
        self.debugLog('Connection closed')

    def debugLog(self, message):
        """Keep the user informed that something is happening

        I don't like silence when running applications, so we will go ahead
        and be a little noisy

        Arguments:
            message {String} -- The message to output
        """
        print('DEBUG :: ' + message)

if __name__ == '__main__':
    # Kick it off!
    logged = NewsLogging()
    logged.answer()
    logged.close()
